/*
Copyright (c) 2010 Alberto Fajardo

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

The tweaks and modifications for Java:
Copyright (c) 2010, Werner Dittmann. 

The same permissions granted.
 */

/*
 * Use the following commad (on Linux for example) to generate the real
 * C soure file:
 *    gcc -E - < Threefish512.c.template | sed -e '/^#/d' > Threefish512Block.c
 *
 * The resulting C file needs some editing, mainly to add other #include
 * stuff to resolve the type definitions. Linux requires a #include <stdint.h>
 * 
 * The mix.h contains Mix and UnMix macros that replace the Mix/UnMix calls
 * below with the real code. This produces unrolled loops. This technique
 * saves a lot of error prone editing.
 * sed just removes some lines that gcc -E inserted.
 */

#include "mix.h"
#include "shifter.h"

void threefishEncrypt512(ThreefishKey_t* keyCtx, uint64_t* input, uint64_t* output)
    {
        // Cache the block, key, and tweak
    uint64_t b0 = input[0], b1 = input[1],
      b2 = input[2], b3 = input[3],
      b4 = input[4], b5 = input[5],
      b6 = input[6], b7 = input[7];
    uint64_t k0 = keyCtx->key[0], k1 = keyCtx->key[1],
      k2 = keyCtx->key[2], k3 = keyCtx->key[3],
      k4 = keyCtx->key[4], k5 = keyCtx->key[5],
      k6 = keyCtx->key[6], k7 = keyCtx->key[7],
      k8 = keyCtx->key[8];
    uint64_t t0 = keyCtx->tweak[0], t1 = keyCtx->tweak[1],
      t2 = keyCtx->tweak[2];

        Mix5( b0,  b1, R_512_0_0, k0, k1);
        Mix5( b2,  b3, R_512_0_1, k2, k3);
        Mix5( b4,  b5, R_512_0_2, k4, k5 + t0);
        Mix5( b6,  b7, R_512_0_3, k6 + t1, k7);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k1, k2);
        Mix5( b2,  b3, R_512_4_1, k3, k4);
        Mix5( b4,  b5, R_512_4_2, k5, k6 + t1);
        Mix5( b6,  b7, R_512_4_3, k7 + t2, k8 + 1);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k2, k3);
        Mix5( b2,  b3, R_512_0_1, k4, k5);
        Mix5( b4,  b5, R_512_0_2, k6, k7 + t2);
        Mix5( b6,  b7, R_512_0_3, k8 + t0, k0 + 2);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k3, k4);
        Mix5( b2,  b3, R_512_4_1, k5, k6);
        Mix5( b4,  b5, R_512_4_2, k7, k8 + t0);
        Mix5( b6,  b7, R_512_4_3, k0 + t1, k1 + 3);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k4, k5);
        Mix5( b2,  b3, R_512_0_1, k6, k7);
        Mix5( b4,  b5, R_512_0_2, k8, k0 + t1);
        Mix5( b6,  b7, R_512_0_3, k1 + t2, k2 + 4);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k5, k6);
        Mix5( b2,  b3, R_512_4_1, k7, k8);
        Mix5( b4,  b5, R_512_4_2, k0, k1 + t2);
        Mix5( b6,  b7, R_512_4_3, k2 + t0, k3 + 5);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k6, k7);
        Mix5( b2,  b3, R_512_0_1, k8, k0);
        Mix5( b4,  b5, R_512_0_2, k1, k2 + t0);
        Mix5( b6,  b7, R_512_0_3, k3 + t1, k4 + 6);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k7, k8);
        Mix5( b2,  b3, R_512_4_1, k0, k1);
        Mix5( b4,  b5, R_512_4_2, k2, k3 + t1);
        Mix5( b6,  b7, R_512_4_3, k4 + t2, k5 + 7);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k8, k0);
        Mix5( b2,  b3, R_512_0_1, k1, k2);
        Mix5( b4,  b5, R_512_0_2, k3, k4 + t2);
        Mix5( b6,  b7, R_512_0_3, k5 + t0, k6 + 8);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k0, k1);
        Mix5( b2,  b3, R_512_4_1, k2, k3);
        Mix5( b4,  b5, R_512_4_2, k4, k5 + t0);
        Mix5( b6,  b7, R_512_4_3, k6 + t1, k7 + 9);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k1, k2);
        Mix5( b2,  b3, R_512_0_1, k3, k4);
        Mix5( b4,  b5, R_512_0_2, k5, k6 + t1);
        Mix5( b6,  b7, R_512_0_3, k7 + t2, k8 + 10);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k2, k3);
        Mix5( b2,  b3, R_512_4_1, k4, k5);
        Mix5( b4,  b5, R_512_4_2, k6, k7 + t2);
        Mix5( b6,  b7, R_512_4_3, k8 + t0, k0 + 11);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k3, k4);
        Mix5( b2,  b3, R_512_0_1, k5, k6);
        Mix5( b4,  b5, R_512_0_2, k7, k8 + t0);
        Mix5( b6,  b7, R_512_0_3, k0 + t1, k1 + 12);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k4, k5);
        Mix5( b2,  b3, R_512_4_1, k6, k7);
        Mix5( b4,  b5, R_512_4_2, k8, k0 + t1);
        Mix5( b6,  b7, R_512_4_3, k1 + t2, k2 + 13);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k5, k6);
        Mix5( b2,  b3, R_512_0_1, k7, k8);
        Mix5( b4,  b5, R_512_0_2, k0, k1 + t2);
        Mix5( b6,  b7, R_512_0_3, k2 + t0, k3 + 14);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k6, k7);
        Mix5( b2,  b3, R_512_4_1, k8, k0);
        Mix5( b4,  b5, R_512_4_2, k1, k2 + t0);
        Mix5( b6,  b7, R_512_4_3, k3 + t1, k4 + 15);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k7, k8);
        Mix5( b2,  b3, R_512_0_1, k0, k1);
        Mix5( b4,  b5, R_512_0_2, k2, k3 + t1);
        Mix5( b6,  b7, R_512_0_3, k4 + t2, k5 + 16);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k8, k0);
        Mix5( b2,  b3, R_512_4_1, k1, k2);
        Mix5( b4,  b5, R_512_4_2, k3, k4 + t2);
        Mix5( b6,  b7, R_512_4_3, k5 + t0, k6 + 17);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);

        output[0] = b0 + k0;
        output[1] = b1 + k1;
        output[2] = b2 + k2;
        output[3] = b3 + k3;
        output[4] = b4 + k4;
        output[5] = b5 + k5 + t0;
        output[6] = b6 + k6 + t1;
        output[7] = b7 + k7 + 18;
    }

void threefishDecrypt512(ThreefishKey_t* keyCtx, uint64_t* input, uint64_t* output)
    {
        // Cache the block, key, and tweak
    uint64_t b0 = input[0], b1 = input[1],
      b2 = input[2], b3 = input[3],
      b4 = input[4], b5 = input[5],
      b6 = input[6], b7 = input[7];
    uint64_t k0 = keyCtx->key[0], k1 = keyCtx->key[1],
      k2 = keyCtx->key[2], k3 = keyCtx->key[3],
      k4 = keyCtx->key[4], k5 = keyCtx->key[5],
      k6 = keyCtx->key[6], k7 = keyCtx->key[7],
      k8 = keyCtx->key[8];
    uint64_t t0 = keyCtx->tweak[0], t1 = keyCtx->tweak[1],
      t2 = keyCtx->tweak[2];

      uint64_t tmp;

        b0 -= k0;
        b1 -= k1;
        b2 -= k2;
        b3 -= k3;
        b4 -= k4;
        b5 -= k5 + t0;
        b6 -= k6 + t1;
        b7 -= k7 + 18;
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k5 + t0, k6 + 17);
        UnMix5( b4,  b5, R_512_4_2, k3, k4 + t2);
        UnMix5( b2,  b3, R_512_4_1, k1, k2);
        UnMix5( b0,  b1, R_512_4_0, k8, k0);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k4 + t2, k5 + 16);
        UnMix5( b4,  b5, R_512_0_2, k2, k3 + t1);
        UnMix5( b2,  b3, R_512_0_1, k0, k1);
        UnMix5( b0,  b1, R_512_0_0, k7, k8);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k3 + t1, k4 + 15);
        UnMix5( b4,  b5, R_512_4_2, k1, k2 + t0);
        UnMix5( b2,  b3, R_512_4_1, k8, k0);
        UnMix5( b0,  b1, R_512_4_0, k6, k7);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k2 + t0, k3 + 14);
        UnMix5( b4,  b5, R_512_0_2, k0, k1 + t2);
        UnMix5( b2,  b3, R_512_0_1, k7, k8);
        UnMix5( b0,  b1, R_512_0_0, k5, k6);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k1 + t2, k2 + 13);
        UnMix5( b4,  b5, R_512_4_2, k8, k0 + t1);
        UnMix5( b2,  b3, R_512_4_1, k6, k7);
        UnMix5( b0,  b1, R_512_4_0, k4, k5);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k0 + t1, k1 + 12);
        UnMix5( b4,  b5, R_512_0_2, k7, k8 + t0);
        UnMix5( b2,  b3, R_512_0_1, k5, k6);
        UnMix5( b0,  b1, R_512_0_0, k3, k4);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k8 + t0, k0 + 11);
        UnMix5( b4,  b5, R_512_4_2, k6, k7 + t2);
        UnMix5( b2,  b3, R_512_4_1, k4, k5);
        UnMix5( b0,  b1, R_512_4_0, k2, k3);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k7 + t2, k8 + 10);
        UnMix5( b4,  b5, R_512_0_2, k5, k6 + t1);
        UnMix5( b2,  b3, R_512_0_1, k3, k4);
        UnMix5( b0,  b1, R_512_0_0, k1, k2);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k6 + t1, k7 + 9);
        UnMix5( b4,  b5, R_512_4_2, k4, k5 + t0);
        UnMix5( b2,  b3, R_512_4_1, k2, k3);
        UnMix5( b0,  b1, R_512_4_0, k0, k1);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k5 + t0, k6 + 8);
        UnMix5( b4,  b5, R_512_0_2, k3, k4 + t2);
        UnMix5( b2,  b3, R_512_0_1, k1, k2);
        UnMix5( b0,  b1, R_512_0_0, k8, k0);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k4 + t2, k5 + 7);
        UnMix5( b4,  b5, R_512_4_2, k2, k3 + t1);
        UnMix5( b2,  b3, R_512_4_1, k0, k1);
        UnMix5( b0,  b1, R_512_4_0, k7, k8);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k3 + t1, k4 + 6);
        UnMix5( b4,  b5, R_512_0_2, k1, k2 + t0);
        UnMix5( b2,  b3, R_512_0_1, k8, k0);
        UnMix5( b0,  b1, R_512_0_0, k6, k7);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k2 + t0, k3 + 5);
        UnMix5( b4,  b5, R_512_4_2, k0, k1 + t2);
        UnMix5( b2,  b3, R_512_4_1, k7, k8);
        UnMix5( b0,  b1, R_512_4_0, k5, k6);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k1 + t2, k2 + 4);
        UnMix5( b4,  b5, R_512_0_2, k8, k0 + t1);
        UnMix5( b2,  b3, R_512_0_1, k6, k7);
        UnMix5( b0,  b1, R_512_0_0, k4, k5);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k0 + t1, k1 + 3);
        UnMix5( b4,  b5, R_512_4_2, k7, k8 + t0);
        UnMix5( b2,  b3, R_512_4_1, k5, k6);
        UnMix5( b0,  b1, R_512_4_0, k3, k4);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k8 + t0, k0 + 2);
        UnMix5( b4,  b5, R_512_0_2, k6, k7 + t2);
        UnMix5( b2,  b3, R_512_0_1, k4, k5);
        UnMix5( b0,  b1, R_512_0_0, k2, k3);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k7 + t2, k8 + 1);
        UnMix5( b4,  b5, R_512_4_2, k5, k6 + t1);
        UnMix5( b2,  b3, R_512_4_1, k3, k4);
        UnMix5( b0,  b1, R_512_4_0, k1, k2);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k6 + t1, k7);
        UnMix5( b4,  b5, R_512_0_2, k4, k5 + t0);
        UnMix5( b2,  b3, R_512_0_1, k2, k3);
        UnMix5( b0,  b1, R_512_0_0, k0, k1);

    output[0] = b0;
    output[1] = b1;
    output[2] = b2;
    output[3] = b3;

        output[7] = b7;
        output[6] = b6;
        output[5] = b5;
        output[4] = b4;
    }
