/*
Copyright (c) 2010 Alberto Fajardo

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

The tweaks and modifications for Java:
Copyright (c) 2010, Werner Dittmann. 

The same permissions granted.
 */

/*
 * Use the following commad (on Linux for example) to generate the real
 * Java class:
 *    gcc -E - < Threefish512.java.template | sed -e '/^#/d' > Threefish512.java
 *
 * Then replace the class code in org/bouncycastle/crypto/engines/ThreefishCipher
 * with the newly generated class code.
 * 
 * The mix.h contains Mix and UnMix macros that replace the Mix/UnMix calls
 * below with the real code. This produces unrolled loops. This technique
 * saves a lot of error prone editing.
 * sed just removes some lines that gcc -E inserted.
 */
#include "mix.h"
#include "shifter.h"

public class Threefish512  extends ThreefishCipher {

    private final int CIPHER_SIZE = 512;
    private final int CIPHER_QWORDS = CIPHER_SIZE / 64;
    private final int EXPANDED_KEY_SIZE = CIPHER_QWORDS + 1;

    public Threefish512()
    {
        // Create the expanded key array
        expandedKey = new long[EXPANDED_KEY_SIZE];
        expandedKey[EXPANDED_KEY_SIZE - 1] = KEY_SCHEDULE_CONST;
    }

    public void Encrypt(long[] input, long[] output)
    {
        // Cache the block, key, and tweak
        long b0 = input[0], b1 = input[1],
        b2 = input[2], b3 = input[3],
        b4 = input[4], b5 = input[5],
        b6 = input[6], b7 = input[7];
        long k0 = expandedKey[0], k1 = expandedKey[1],
        k2 = expandedKey[2], k3 = expandedKey[3],
        k4 = expandedKey[4], k5 = expandedKey[5],
        k6 = expandedKey[6], k7 = expandedKey[7],
        k8 = expandedKey[8];
        long t0 = expandedTweak[0], t1 = expandedTweak[1],
        t2 = expandedTweak[2];

        Mix5( b0,  b1, R_512_0_0, k0, k1);		// R0
        Mix5( b2,  b3, R_512_0_1, k2, k3);
        Mix5( b4,  b5, R_512_0_2, k4, k5 + t0);
        Mix5( b6,  b7, R_512_0_3, k6 + t1, k7);
        Mix( b2,  b1, R_512_1_0);			// R1
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);			// R2
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);			// R3
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k1, k2);		// R4
        Mix5( b2,  b3, R_512_4_1, k3, k4);
        Mix5( b4,  b5, R_512_4_2, k5, k6 + t1);
        Mix5( b6,  b7, R_512_4_3, k7 + t2, k8 + 1);
        Mix( b2,  b1, R_512_5_0);			// R5
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);			// R6
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);			// R7
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k2, k3);		// R8
        Mix5( b2,  b3, R_512_0_1, k4, k5);
        Mix5( b4,  b5, R_512_0_2, k6, k7 + t2);
        Mix5( b6,  b7, R_512_0_3, k8 + t0, k0 + 2);
        Mix( b2,  b1, R_512_1_0);			// R9
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);			// R10
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);			// R11
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k3, k4);		// R12
        Mix5( b2,  b3, R_512_4_1, k5, k6);
        Mix5( b4,  b5, R_512_4_2, k7, k8 + t0);
        Mix5( b6,  b7, R_512_4_3, k0 + t1, k1 + 3);
        Mix( b2,  b1, R_512_5_0);			// R13
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);			// R14
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);			// R15
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k4, k5);		// R16
        Mix5( b2,  b3, R_512_0_1, k6, k7);
        Mix5( b4,  b5, R_512_0_2, k8, k0 + t1);
        Mix5( b6,  b7, R_512_0_3, k1 + t2, k2 + 4);
        Mix( b2,  b1, R_512_1_0);			// R17
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);			// R18
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);			// R19
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k5, k6);		// R20
        Mix5( b2,  b3, R_512_4_1, k7, k8);
        Mix5( b4,  b5, R_512_4_2, k0, k1 + t2);
        Mix5( b6,  b7, R_512_4_3, k2 + t0, k3 + 5);
        Mix( b2,  b1, R_512_5_0);			// R21
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);			// R22
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);			// R23
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k6, k7);		// R24
        Mix5( b2,  b3, R_512_0_1, k8, k0);
        Mix5( b4,  b5, R_512_0_2, k1, k2 + t0);
        Mix5( b6,  b7, R_512_0_3, k3 + t1, k4 + 6);
        Mix( b2,  b1, R_512_1_0);			// R25
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);			// R26
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);			// R27
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k7, k8);		// R28
        Mix5( b2,  b3, R_512_4_1, k0, k1);
        Mix5( b4,  b5, R_512_4_2, k2, k3 + t1);
        Mix5( b6,  b7, R_512_4_3, k4 + t2, k5 + 7);
        Mix( b2,  b1, R_512_5_0);			// R29
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);			// R30
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);			// R31
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k8, k0);		// R32
        Mix5( b2,  b3, R_512_0_1, k1, k2);
        Mix5( b4,  b5, R_512_0_2, k3, k4 + t2);
        Mix5( b6,  b7, R_512_0_3, k5 + t0, k6 + 8);
        Mix( b2,  b1, R_512_1_0);			// R33
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);			// R34
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);			// R35
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k0, k1);		// R36
        Mix5( b2,  b3, R_512_4_1, k2, k3);
        Mix5( b4,  b5, R_512_4_2, k4, k5 + t0);
        Mix5( b6,  b7, R_512_4_3, k6 + t1, k7 + 9);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k1, k2);
        Mix5( b2,  b3, R_512_0_1, k3, k4);
        Mix5( b4,  b5, R_512_0_2, k5, k6 + t1);
        Mix5( b6,  b7, R_512_0_3, k7 + t2, k8 + 10);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k2, k3);
        Mix5( b2,  b3, R_512_4_1, k4, k5);
        Mix5( b4,  b5, R_512_4_2, k6, k7 + t2);
        Mix5( b6,  b7, R_512_4_3, k8 + t0, k0 + 11);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k3, k4);
        Mix5( b2,  b3, R_512_0_1, k5, k6);
        Mix5( b4,  b5, R_512_0_2, k7, k8 + t0);
        Mix5( b6,  b7, R_512_0_3, k0 + t1, k1 + 12);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k4, k5);
        Mix5( b2,  b3, R_512_4_1, k6, k7);
        Mix5( b4,  b5, R_512_4_2, k8, k0 + t1);
        Mix5( b6,  b7, R_512_4_3, k1 + t2, k2 + 13);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k5, k6);
        Mix5( b2,  b3, R_512_0_1, k7, k8);
        Mix5( b4,  b5, R_512_0_2, k0, k1 + t2);
        Mix5( b6,  b7, R_512_0_3, k2 + t0, k3 + 14);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k6, k7);
        Mix5( b2,  b3, R_512_4_1, k8, k0);
        Mix5( b4,  b5, R_512_4_2, k1, k2 + t0);
        Mix5( b6,  b7, R_512_4_3, k3 + t1, k4 + 15);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);
        Mix5( b0,  b1, R_512_0_0, k7, k8);
        Mix5( b2,  b3, R_512_0_1, k0, k1);
        Mix5( b4,  b5, R_512_0_2, k2, k3 + t1);
        Mix5( b6,  b7, R_512_0_3, k4 + t2, k5 + 16);
        Mix( b2,  b1, R_512_1_0);
        Mix( b4,  b7, R_512_1_1);
        Mix( b6,  b5, R_512_1_2);
        Mix( b0,  b3, R_512_1_3);
        Mix( b4,  b1, R_512_2_0);
        Mix( b6,  b3, R_512_2_1);
        Mix( b0,  b5, R_512_2_2);
        Mix( b2,  b7, R_512_2_3);
        Mix( b6,  b1, R_512_3_0);
        Mix( b0,  b7, R_512_3_1);
        Mix( b2,  b5, R_512_3_2);
        Mix( b4,  b3, R_512_3_3);
        Mix5( b0,  b1, R_512_4_0, k8, k0);
        Mix5( b2,  b3, R_512_4_1, k1, k2);
        Mix5( b4,  b5, R_512_4_2, k3, k4 + t2);
        Mix5( b6,  b7, R_512_4_3, k5 + t0, k6 + 17);
        Mix( b2,  b1, R_512_5_0);
        Mix( b4,  b7, R_512_5_1);
        Mix( b6,  b5, R_512_5_2);
        Mix( b0,  b3, R_512_5_3);
        Mix( b4,  b1, R_512_6_0);
        Mix( b6,  b3, R_512_6_1);
        Mix( b0,  b5, R_512_6_2);
        Mix( b2,  b7, R_512_6_3);
        Mix( b6,  b1, R_512_7_0);
        Mix( b0,  b7, R_512_7_1);
        Mix( b2,  b5, R_512_7_2);
        Mix( b4,  b3, R_512_7_3);

        // Final key schedule
        output[0] = b0 + k0;
        output[1] = b1 + k1;
        output[2] = b2 + k2;
        output[3] = b3 + k3;
        output[4] = b4 + k4;
        output[5] = b5 + k5 + t0;
        output[6] = b6 + k6 + t1;
        output[7] = b7 + k7 + 18;
    }

    public void Decrypt(long[] input, long[] output)
    {
        // Cache the block, key, and tweak
        long b0 = input[0], b1 = input[1],
        b2 = input[2], b3 = input[3],
        b4 = input[4], b5 = input[5],
        b6 = input[6], b7 = input[7];
        long k0 = expandedKey[0], k1 = expandedKey[1],
        k2 = expandedKey[2], k3 = expandedKey[3],
        k4 = expandedKey[4], k5 = expandedKey[5],
        k6 = expandedKey[6], k7 = expandedKey[7],
        k8 = expandedKey[8];
        long t0 = expandedTweak[0], t1 = expandedTweak[1],
        t2 = expandedTweak[2];
	long tmp;

        b0 -= k0;
        b1 -= k1;
        b2 -= k2;
        b3 -= k3;
        b4 -= k4;
        b5 -= k5 + t0;
        b6 -= k6 + t1;
        b7 -= k7 + 18;
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k5 + t0, k6 + 17);
        UnMix5( b4,  b5, R_512_4_2, k3, k4 + t2);
        UnMix5( b2,  b3, R_512_4_1, k1, k2);
        UnMix5( b0,  b1, R_512_4_0, k8, k0);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k4 + t2, k5 + 16);
        UnMix5( b4,  b5, R_512_0_2, k2, k3 + t1);
        UnMix5( b2,  b3, R_512_0_1, k0, k1);
        UnMix5( b0,  b1, R_512_0_0, k7, k8);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k3 + t1, k4 + 15);
        UnMix5( b4,  b5, R_512_4_2, k1, k2 + t0);
        UnMix5( b2,  b3, R_512_4_1, k8, k0);
        UnMix5( b0,  b1, R_512_4_0, k6, k7);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k2 + t0, k3 + 14);
        UnMix5( b4,  b5, R_512_0_2, k0, k1 + t2);
        UnMix5( b2,  b3, R_512_0_1, k7, k8);
        UnMix5( b0,  b1, R_512_0_0, k5, k6);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k1 + t2, k2 + 13);
        UnMix5( b4,  b5, R_512_4_2, k8, k0 + t1);
        UnMix5( b2,  b3, R_512_4_1, k6, k7);
        UnMix5( b0,  b1, R_512_4_0, k4, k5);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k0 + t1, k1 + 12);
        UnMix5( b4,  b5, R_512_0_2, k7, k8 + t0);
        UnMix5( b2,  b3, R_512_0_1, k5, k6);
        UnMix5( b0,  b1, R_512_0_0, k3, k4);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k8 + t0, k0 + 11);
        UnMix5( b4,  b5, R_512_4_2, k6, k7 + t2);
        UnMix5( b2,  b3, R_512_4_1, k4, k5);
        UnMix5( b0,  b1, R_512_4_0, k2, k3);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k7 + t2, k8 + 10);
        UnMix5( b4,  b5, R_512_0_2, k5, k6 + t1);
        UnMix5( b2,  b3, R_512_0_1, k3, k4);
        UnMix5( b0,  b1, R_512_0_0, k1, k2);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k6 + t1, k7 + 9);
        UnMix5( b4,  b5, R_512_4_2, k4, k5 + t0);
        UnMix5( b2,  b3, R_512_4_1, k2, k3);
        UnMix5( b0,  b1, R_512_4_0, k0, k1);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k5 + t0, k6 + 8);
        UnMix5( b4,  b5, R_512_0_2, k3, k4 + t2);
        UnMix5( b2,  b3, R_512_0_1, k1, k2);
        UnMix5( b0,  b1, R_512_0_0, k8, k0);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k4 + t2, k5 + 7);
        UnMix5( b4,  b5, R_512_4_2, k2, k3 + t1);
        UnMix5( b2,  b3, R_512_4_1, k0, k1);
        UnMix5( b0,  b1, R_512_4_0, k7, k8);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k3 + t1, k4 + 6);
        UnMix5( b4,  b5, R_512_0_2, k1, k2 + t0);
        UnMix5( b2,  b3, R_512_0_1, k8, k0);
        UnMix5( b0,  b1, R_512_0_0, k6, k7);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k2 + t0, k3 + 5);
        UnMix5( b4,  b5, R_512_4_2, k0, k1 + t2);
        UnMix5( b2,  b3, R_512_4_1, k7, k8);
        UnMix5( b0,  b1, R_512_4_0, k5, k6);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k1 + t2, k2 + 4);
        UnMix5( b4,  b5, R_512_0_2, k8, k0 + t1);
        UnMix5( b2,  b3, R_512_0_1, k6, k7);
        UnMix5( b0,  b1, R_512_0_0, k4, k5);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k0 + t1, k1 + 3);
        UnMix5( b4,  b5, R_512_4_2, k7, k8 + t0);
        UnMix5( b2,  b3, R_512_4_1, k5, k6);
        UnMix5( b0,  b1, R_512_4_0, k3, k4);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k8 + t0, k0 + 2);
        UnMix5( b4,  b5, R_512_0_2, k6, k7 + t2);
        UnMix5( b2,  b3, R_512_0_1, k4, k5);
        UnMix5( b0,  b1, R_512_0_0, k2, k3);
        UnMix( b4,  b3, R_512_7_3);
        UnMix( b2,  b5, R_512_7_2);
        UnMix( b0,  b7, R_512_7_1);
        UnMix( b6,  b1, R_512_7_0);
        UnMix( b2,  b7, R_512_6_3);
        UnMix( b0,  b5, R_512_6_2);
        UnMix( b6,  b3, R_512_6_1);
        UnMix( b4,  b1, R_512_6_0);
        UnMix( b0,  b3, R_512_5_3);
        UnMix( b6,  b5, R_512_5_2);
        UnMix( b4,  b7, R_512_5_1);
        UnMix( b2,  b1, R_512_5_0);
        UnMix5( b6,  b7, R_512_4_3, k7 + t2, k8 + 1);
        UnMix5( b4,  b5, R_512_4_2, k5, k6 + t1);
        UnMix5( b2,  b3, R_512_4_1, k3, k4);
        UnMix5( b0,  b1, R_512_4_0, k1, k2);
        UnMix( b4,  b3, R_512_3_3);
        UnMix( b2,  b5, R_512_3_2);
        UnMix( b0,  b7, R_512_3_1);
        UnMix( b6,  b1, R_512_3_0);
        UnMix( b2,  b7, R_512_2_3);
        UnMix( b0,  b5, R_512_2_2);
        UnMix( b6,  b3, R_512_2_1);
        UnMix( b4,  b1, R_512_2_0);
        UnMix( b0,  b3, R_512_1_3);
        UnMix( b6,  b5, R_512_1_2);
        UnMix( b4,  b7, R_512_1_1);
        UnMix( b2,  b1, R_512_1_0);
        UnMix5( b6,  b7, R_512_0_3, k6 + t1, k7);
        UnMix5( b4,  b5, R_512_0_2, k4, k5 + t0);
        UnMix5( b2,  b3, R_512_0_1, k2, k3);
        UnMix5( b0,  b1, R_512_0_0, k0, k1);

        output[7] = b7;
        output[6] = b6;
        output[5] = b5;
        output[4] = b4;
        output[3] = b3;
        output[2] = b2;
        output[1] = b1;
        output[0] = b0;
    }
}
